                            
             Memory usage: ▁▃▁▃▁▁▅▅▅▅▅▃▃▄▃▄▄▄▄▄█▇▆▆▄▄▄ (max: 2.245 GB, growth rate:   0%)             
        /home/mmr.pinto/stencilNoTorc.py: % of time = 100.00% (2m:48.651s) out of 2m:48.651s.         
       ╷       ╷       ╷       ╷        ╷       ╷               ╷       ╷                             
       │Time   │–––––– │–––––– │Memory  │–––––– │–––––––––––    │Copy   │                             
  Line │Python │native │system │Python  │peak   │timeline/%     │(MB/s) │/home/mmr.pinto/stencilNoT…  
╺━━━━━━┿━━━━━━━┿━━━━━━━┿━━━━━━━┿━━━━━━━━┿━━━━━━━┿━━━━━━━━━━━━━━━┿━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸
     1 │       │       │       │        │       │               │       │#!/usr/bin/env python3       
     2 │       │       │       │        │       │               │       │                             
     3 │       │       │       │        │       │               │       │from mpi4py import MPI       
     4 │       │       │       │  99%   │   10M │▁▁▁▁▁▁▁▁▁      │     1 │import numpy as np           
     5 │       │       │       │        │       │               │       │import time                  
     6 │       │       │       │        │       │               │       │#import cProfile             
     7 │       │       │       │        │       │               │       │                             
     8 │       │       │       │        │       │               │       │                             
     9 │       │       │       │        │       │               │       │comm = MPI.COMM_WORLD        
    10 │       │       │       │        │       │               │       │                             
    11 │       │       │       │        │       │               │       │def stencilOperation(sub_da  
    12 │       │       │       │        │       │               │       │    size = MPI.COMM_WORLD.G  
    13 │       │       │       │        │       │               │       │    rank = MPI.COMM_WORLD.G  
    14 │       │       │       │        │       │               │       │                             
    15 │       │       │       │        │       │               │       │    # Create buffers for ex  
    16 │       │       │       │        │       │               │       │    send_buffer_top = np.ze  
    17 │       │       │       │        │       │               │       │    send_buffer_bottom = np  
    18 │       │       │       │        │       │               │       │    recv_buffer_top = np.ze  
    19 │       │       │       │        │       │               │       │    recv_buffer_bottom = np  
    20 │       │       │       │        │       │               │       │                             
    21 │       │       │       │        │       │               │       │                             
    22 │       │       │       │        │       │               │       │    # Perform stencil compu  
    23 │       │       │       │        │       │               │       │    if rank > 0:             
    24 │       │       │       │        │       │               │       │        send_buffer_top = s  
    25 │       │       │       │        │       │               │       │        comm.Isend(send_buf  
    26 │       │       │       │        │       │               │       │        comm.Recv(recv_buff  
    27 │       │       │       │        │       │               │       │        sub_data[:radius, :  
    28 │       │       │       │        │       │               │       │                             
    29 │       │       │       │        │       │               │       │    if rank < size - 1:      
    30 │       │       │       │        │       │               │       │        send_buffer_bottom   
    31 │       │       │       │        │       │               │       │        comm.Isend(send_buf  
    32 │       │       │       │        │       │               │       │        comm.Recv(recv_buff  
    33 │       │       │       │        │       │               │       │        sub_data[-radius:,   
    34 │       │       │       │        │       │               │       │                             
    35 │       │       │       │        │       │               │       │                             
    36 │       │       │       │        │       │               │       │    # Apply filter function  
    37 │       │       │       │  22%   │   48M │▁▁▁▁▁▁▁▁▁   3% │       │    result = np.zeros((sub_  
    38 │       │       │       │        │       │               │       │    start = radius           
    39 │       │       │       │        │       │               │       │    end = sub_data.shape[0]  
    40 │       │       │       │        │       │               │       │                             
    41 │       │       │       │        │       │               │       │    for i in range(start, e  
    42 │       │       │       │        │       │               │       │        for j in range(radi  
    43 │    6% │       │       │        │       │               │       │            window = sub_da  
    44 │       │       │       │        │       │               │       │            aux = filter_fu  
    45 │    4% │       │       │        │       │               │       │            result[i - radi  
    46 │       │       │       │        │       │               │       │                             
    47 │       │       │       │        │       │               │       │                             
    48 │       │       │       │        │       │               │       │    # Update sub_data with   
    49 │       │       │       │        │       │               │       │    sub_data = result        
    50 │       │       │       │        │       │               │       │                             
    51 │       │       │       │        │       │               │       │    # Gather the results fr  
    52 │       │       │       │        │       │               │       │    gathered_data = None     
    53 │       │       │       │        │       │               │       │    if rank == 0:            
    54 │       │       │       │  90%   │  763M │▁   3%         │       │        gathered_data = np.  
    55 │       │    4% │       │  90%   │  763M │▂▁▂▂▁▂▁▂▁  23% │     5 │    comm.Gather(sub_data, g  
    56 │       │       │       │        │       │               │       │                             
    57 │       │       │       │        │       │               │       │    return gathered_data     
    58 │       │       │       │        │       │               │       │                             
    59 │       │       │       │        │       │               │       │                             
    60 │       │       │       │        │       │               │       │def stencil2DSubmited(data,  
    61 │       │       │       │        │       │               │       │    size = MPI.COMM_WORLD.G  
    62 │       │       │       │        │       │               │       │    rank = MPI.COMM_WORLD.G  
    63 │       │       │       │        │       │               │       │    num_rows = (originalSha  
    64 │       │       │       │        │       │               │       │    # Scatter the data to a  
    65 │       │       │       │        │       │               │       │    if rank == 0:            
    66 │       │       │       │ 100%   │ 1.49G │▁▁▁▁▁▁▁▁▁   9% │    14 │        local_arr = comm.sc  
    67 │       │       │       │        │       │               │       │    else:                    
    68 │       │       │       │ 100%   │   95M │▁▁▁▁▁▁▁▁▁   6% │     4 │        local_arr = comm.sc  
    69 │       │       │       │        │       │               │       │                             
    70 │       │       │       │        │       │               │       │                             
    71 │       │       │       │        │       │               │       │    worker_chunk_size = (nu  
    72 │       │       │       │        │       │               │       │                             
    73 │       │       │       │        │       │               │       │    if local_arr.shape[0] !  
    74 │       │       │       │        │       │               │       │        aux_arr = np.zeros(  
    75 │       │       │       │        │       │               │       │        aux_arr[:local_arr.  
    76 │       │       │       │        │       │               │       │        local_arr = aux_arr  
    77 │       │       │       │        │       │               │       │                             
    78 │       │       │       │        │       │               │       │    #local_arr = local_arr[  
    79 │       │       │       │        │       │               │       │                             
    80 │       │       │       │  28%   │   48M │▁▁▁▁▁▁▁▁▁   3% │       │    sub_data = np.zeros((lo  
    81 │       │       │       │        │       │               │       │                             
    82 │       │       │       │        │       │               │       │                             
    83 │       │       │       │        │       │               │       │    if rank < size - 1:      
    84 │       │       │       │        │       │               │       │        sub_data[radius:-ra  
    85 │       │       │       │        │       │               │       │    else:                    
    86 │       │       │       │        │       │               │       │        # Last rank handles  
    87 │       │       │       │        │       │               │       │        sub_data[radius:-ra  
    88 │       │       │       │        │       │               │       │                             
    89 │       │       │       │        │       │               │       │                             
    90 │       │       │       │        │       │               │       │    # Perform stencil compu  
    91 │       │       │       │        │       │               │       │    result = stencilOperati  
    92 │       │       │       │        │       │               │       │                             
    93 │       │       │       │        │       │               │       │    if rank == 0:            
    94 │       │       │       │        │       │               │       │        result = (rank,resu  
    95 │       │       │       │        │       │               │       │        return result        
    96 │       │       │       │        │       │               │       │                             
    97 │       │       │       │        │       │               │       │def filter_function(sub_arr  
    98 │   19% │       │       │        │       │               │     1 │    filter = np.array([[0,   
    99 │       │       │       │        │       │               │       │    result = None            
   100 │    2% │       │       │        │       │               │       │    radius = filter.shape[0  
   101 │   60% │       │       │        │       │               │   112 │    result = np.sum(sub_arr  
   102 │       │       │       │        │       │               │       │    return result            
   103 │       │       │       │        │       │               │       │                             
   104 │       │       │       │        │       │               │       │def create_2d_array(rows, c  
   105 │       │       │       │        │       │               │       │    # Create an array of ar  
   106 │       │       │       │   2%   │  762M │▂▂▂▂▂▂▂▂▂  52% │       │    result_array = np.ones(  
   107 │       │       │       │        │       │               │       │                             
   108 │       │       │       │        │       │               │       │    return result_array      
   109 │       │       │       │        │       │               │       │                             
   110 │       │       │       │        │       │               │       │                             
   111 │       │       │       │        │       │               │       │# Test the function          
   112 │       │       │       │        │       │               │       │#if __name__ == "__main__":  
   113 │       │       │       │        │       │               │       │#    data = create_2d_array  
   114 │       │       │       │        │       │               │       │                             
   115 │       │       │       │        │       │               │       │#    radius = 1              
   116 │       │       │       │        │       │               │       │#    rank = comm.Get_rank()  
   117 │       │       │       │        │       │               │       │                             
   118 │       │       │       │        │       │               │       │#    ts = 0                  
   119 │       │       │       │        │       │               │       │#    if rank == 0:           
   120 │       │       │       │        │       │               │       │#        ts = time.time()    
   121 │       │       │       │        │       │               │       │#        toRet = stencil2DS  
   122 │       │       │       │        │       │               │       │#        ts = time.time() -  
   123 │       │       │       │        │       │               │       │#        print("ended execu  
   124 │       │       │       │        │       │               │       │#        print("to return",  
   125 │       │       │       │        │       │               │       │#    else:                   
   126 │       │       │       │        │       │               │       │#        toRet = stencil2DS  
   127 │       │       │       │        │       │               │       │                             
   128 │       │       │       │        │       │               │       │                             
   129 │       │       │       │        │       │               │       │def main():                  
   130 │       │       │       │        │       │               │       │    data = create_2d_array(  
   131 │       │       │       │        │       │               │       │                             
   132 │       │       │       │        │       │               │       │    radius = 1               
   133 │       │       │       │        │       │               │       │    rank = comm.Get_rank()   
   134 │       │       │       │        │       │               │       │                             
   135 │       │       │       │        │       │               │       │    ts = 0                   
   136 │       │       │       │        │       │               │       │    if rank == 0:            
   137 │       │       │       │        │       │               │       │        ts = time.time()     
   138 │       │       │       │        │       │               │       │        toRet = stencil2DSu  
   139 │       │       │       │        │       │               │       │        ts = time.time() -   
   140 │       │       │       │        │       │               │       │        print("ended execut  
   141 │       │       │       │        │       │               │       │        print("to return",   
   142 │       │       │       │        │       │               │       │    else:                    
   143 │       │       │       │        │       │               │       │        toRet = stencil2DSu  
   144 │       │       │       │        │       │               │       │                             
   145 │       │       │       │        │       │               │       │if __name__ == "__main__":   
   146 │       │       │       │        │       │               │       │    main()                   
   147 │       │       │       │        │       │               │       │    #rank = MPI.COMM_WORLD.  
   148 │       │       │       │        │       │               │       │    #cProfile.run('main()',  
   149 │       │       │       │        │       │               │       │                             
   150 │       │       │       │        │       │               │       │                             
       │       │       │       │        │       │               │       │                             
╶──────┼───────┼───────┼───────┼────────┼───────┼───────────────┼───────┼────────────────────────────╴
       │       │       │       │        │       │               │       │function summary for /home…  
    11 │   11% │    4% │       │  83%   │  763M │█████████  29% │     5 │stencilOperation             
    60 │       │       │       │  87%   │ 1.49G │█████████  18% │    18 │stencil2DSubmited            
    97 │   82% │       │       │        │       │               │   113 │filter_function              
   104 │       │       │       │   2%   │  762M │█████████  52% │       │create_2d_array              
       ╵       ╵       ╵       ╵        ╵       ╵               ╵       ╵                             
Top PEAK memory consumption, by line:
(1)    66:  1524 MB                                                                                    
(2)    54:   763 MB                                                                                    
(3)    55:   763 MB                                                                                    
(4)   106:   762 MB                                                                                    
(5)    68:    95 MB     